// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/auth/manager.go
//
// Generated by this command:
//
//	mockgen -source=pkg/auth/manager.go -destination=pkg/auth/mocks/mock_auth_manager.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"
	time "time"

	auth "github.com/Cheasezz/anSpace/backend/pkg/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// NewJWT mocks base method.
func (m *MockTokenManager) NewJWT(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJWT", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJWT indicates an expected call of NewJWT.
func (mr *MockTokenManagerMockRecorder) NewJWT(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJWT", reflect.TypeOf((*MockTokenManager)(nil).NewJWT), userId)
}

// NewRefreshToken mocks base method.
func (m *MockTokenManager) NewRefreshToken() (auth.RTInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRefreshToken")
	ret0, _ := ret[0].(auth.RTInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRefreshToken indicates an expected call of NewRefreshToken.
func (mr *MockTokenManagerMockRecorder) NewRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRefreshToken", reflect.TypeOf((*MockTokenManager)(nil).NewRefreshToken))
}

// Parse mocks base method.
func (m *MockTokenManager) Parse(accessToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockTokenManagerMockRecorder) Parse(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokenManager)(nil).Parse), accessToken)
}

// ValidateRefreshToken mocks base method.
func (m *MockTokenManager) ValidateRefreshToken(expiresAt time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", expiresAt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockTokenManagerMockRecorder) ValidateRefreshToken(expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockTokenManager)(nil).ValidateRefreshToken), expiresAt)
}
